# (c) 2016 Red Hat Inc.
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# Make coding more python3-ish
from __future__ import absolute_import, division, print_function

__metaclass__ = type

from ansible_collections.vyos.vyos.tests.unit.compat.mock import patch
from ansible_collections.vyos.vyos.plugins.modules import vyos_bgp_address_family
from ansible_collections.vyos.vyos.tests.unit.modules.utils import (
    set_module_args,
)
from .vyos_module import TestVyosModule, load_fixture


class TestVyosBgpAddressFamilyModule(TestVyosModule):

    module = vyos_bgp_address_family

    def setUp(self):
        self.mock_get_resource_connection_config = patch(
            "ansible_collections.ansible.netcommon.plugins.module_utils.network.common.rm_base.resource_module_base.get_resource_connection"
        )
        self.get_resource_connection_config = (
            self.mock_get_resource_connection_config.start()
        )

        self.mock_get_resource_connection_facts = patch(
            "ansible_collections.ansible.netcommon.plugins.module_utils.network.common.facts.facts.get_resource_connection"
        )
        self.get_resource_connection_facts = (
            self.mock_get_resource_connection_facts.start()
        )

        self.mock_execute_show_command = patch(
            "ansible_collections.vyos.vyos.plugins.module_utils.network.vyos.facts.bgp_address_family.bgp_address_family.Bgp_address_familyFacts.get_device_data"
        )

        self.execute_show_command = self.mock_execute_show_command.start()

    def tearDown(self):
        super(TestVyosBgpAddressFamilyModule, self).tearDown()
        self.mock_get_resource_connection_config.stop()
        self.mock_get_resource_connection_facts.stop()
        self.mock_execute_show_command.stop()

    def load_fixtures(self, commands=None, transport="cli", filename=None):
        if filename is None:
            filename = "vyos_bgp_address_family_config.cfg"

        def load_from_file(*args, **kwargs):
            output = load_fixture(filename)
            return output

        self.execute_show_command.side_effect = load_from_file

    def test_vyos_bgp_address_family_merged_idempotent(self):
        set_module_args(
            dict(
                config=dict(
                    as_number=65536,
                    address_family=[
                        dict(
                            afi="ipv4",
                            aggregate_address=[
                                dict(prefix="192.0.2.0/24", as_set=True)
                            ],
                            networks=[
                                dict(prefix="192.1.13.0/24", route_map="map01"),
                                dict(prefix="192.2.13.0/24", backdoor=True)
                            ],
                        ),
                        dict(
                            afi="ipv6",
                            redistribute=[
                                dict(protocol="ripng", metric=20)
                            ]
                        )
                    ],
                    neighbors=[
                        dict(
                            neighbor_address="192.0.2.25",
                            address_family=[
                                dict(
                                    afi="ipv4",
                                    route_map=[
                                        dict(action="export", route_map="map01")
                                    ],
                                    soft_reconfiguration=True
                                ),
                            ]
                        ),
                        dict(
                            neighbor_address="203.0.113.5",
                            address_family=[
                                dict(
                                    afi="ipv6",
                                    attribute_unchanged=dict(next_hop=True)
                                )
                            ]
                        )
                    ]
                )
            )
        )
        self.execute_module(changed=False, commands=[])

    def test_vyos_bgp_address_family_merged(self):
        set_module_args(
            dict(
                config=dict(
                    as_number=65536,
                    address_family=[
                        dict(
                            afi="ipv4",
                            aggregate_address=[
                                dict(prefix="192.0.2.0/24", summary_only=True)
                            ],
                            networks=[
                                dict(prefix="192.1.13.0/24", route_map="map01"),
                            ],
                        ),
                        dict(
                            afi="ipv6",
                            redistribute=[
                                dict(protocol="ospfv3", metric=20)
                            ]
                        )
                    ],
                    neighbors=[
                        dict(
                            neighbor_address="192.10.21.25",
                            address_family=[
                                dict(
                                    afi="ipv6",
                                    distribute_list=[
                                        dict(action="export", acl=10)
                                    ],
                                    route_server_client=True
                                ),
                            ]
                        ),
                        dict(
                            neighbor_address="203.0.113.5",
                            address_family=[
                                dict(
                                    afi="ipv4",
                                    filter_list=[
                                        dict(action="export", path_list="list01"),
                                    ],
                                    capability=dict(orf="send")
                                )
                            ]
                        )
                    ]
                )
            )
        )
        self.execute_module(changed=True, commands=[])
